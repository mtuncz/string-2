import java.util.HashMap;
import java.util.Map;

public class study0913191 {
    public static void main(String [] args){
        //longest substring without repeating chars
        String str1 = "ABDEFGABEF";
        long t1 = System.currentTimeMillis();
        System.out.println(longestSub(str1));
        long t2 = System.currentTimeMillis();
        System.out.println("Time passed : " + (t2-t1));
    }

    public static int[] counts(String str){
        int[] countArr = new int[str.length()];

        for(int i = 0; i < str.length(); i++){
            int count = 0;
            for(int n = 0; n < str.length(); n++){
                if(str.charAt(n) == str.charAt(i)){
                    count++;
                }
            }
            countArr[i] = count;
        }
        return countArr;
    }

    public static String longestSub(String str) {
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < str.length(); i++) {
            for (int j = i + 1; j < str.length(); j++) {
                String curSub = str.substring(i, j + 1);
                int[] counts = counts(curSub);
                boolean isOne = true;
                for(int t = 0; t < counts.length; t++){
                    if(counts[t] != 1){
                        isOne = false;
                    }
                }
                if(isOne){
                    map.put(curSub, (j-i+1));
                }
            }
        }

        String longestSub = str.substring(0,1);
        for(Map.Entry<String, Integer> set : map.entrySet()){

            if(set.getKey().length() > longestSub.length()){
                longestSub = set.getKey();
            }
        }

        return longestSub;
    }
}
